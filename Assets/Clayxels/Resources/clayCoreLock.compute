#pragma kernel computeGrid
#pragma kernel cacheDistField
#pragma kernel clearCachedDistField
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#include"claySDF.compute"
RWStructuredBuffer<int> indirectChunkArgs1,indirectChunkArgs2;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int4> pointCloudData;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float> fieldCache1;RWStructuredBuffer<uint> fieldCache2;
#if DRAW_DEBUG
RWStructuredBuffer<float3> debugGridOutPoints;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;float3 chunkCenter=float3(0.,0.,0.);int numChunksX=0,numChunksY=0,numChunksZ=0,fieldCacheSize1=0,fieldCacheSize2=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int alwaysProcessAllChunks=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int f,int i,int c,int s){return f+s*(i+s*c);}uint f(float3 f){uint s=uint(f.x*255)+uint(f.y*255)*256+uint(f.z*255)*256*256;return s;}uint c(float f,float i,float s,float c){uint r=uint(f*63.),M=uint(i*63.),u=uint(s*63.),e=uint((c+1.)*.5*16383.),t=((r<<6|M)<<6|u)<<14|e;return t;}float4 c(uint f){float i=float(f&16383)/16383*2.-1.;f>>=14;float s=float(f&63)/63;f>>=6;float c=float(f&63)/63,u=float(f>>6)/63;return float4(u,c,s,i);}float c(float f,float i,float s){float c=max(s-abs(f-i),0.);return min(f,i)-c*c*.25f/s;}float f(float f,float i,float s){float c=abs(s),u=max(c-abs(-f-i),0.);return max(-f,i)+u*u*.25/c;}bool c(uint f,uint c){uint s=c/32;int i=solidsFilter[f*maxSolidsPerVoxelMask+s],u=c-32*s;if(i>>u&1)return true;return true;}void f(uint f,uint c){uint s=c/32;int t=solidsFilter[f*maxSolidsPerVoxelMask+s],i=c-32*s;solidsFilter[f*maxSolidsPerVoxelMask+s]=t&~(1<<i);}bool s(int f){return f>>0&1;}float c(float3 i,float y,float S,uint x,uint u){float r;
#if CLAYXELS_CACHEON
r=fieldCache1[chunkId*fieldCacheSize1+u];
#else
r=1e+10;
#endif
int t=0;uint e=u*maxSolidsPerVoxel;for(uint g=0;g<x;++g){if(!c(u,g)){continue;}uint n=prefilteredSolidIds[e+g];float3 M=solidsScale[n];float m=(M.x+M.y+M.z)*.333333,z=solidsBlend[n]*m;float4 k=solidsAttrs[n];float d=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],M,k,m);if(!s(k.w)){if(z==0.)r=min(d,r);else if(z>0.)r=c(d,r,z);else r=f(d,r,z);}if(d>S)f(u,g);S-=abs(z);}return r;}float c(float3 i,float u,out int r,out float3 M,uint x,uint t,uint g){float z;
#if CLAYXELS_CACHEON
float4 m=c(fieldCache2[chunkId*fieldCacheSize2+g]);z=m.w;M=m.xyz;
#else
z=1e+10;M=float3(1.,1.,1.);
#endif
uint e=t*maxSolidsPerVoxel;for(uint S=0;S<x;++S){if(!c(t,S)){continue;}uint n=prefilteredSolidIds[e+S];float3 y=solidsScale[n];float k=(y.x+y.y+y.z)*.333333,d=solidsBlend[n]*k;float3 v=solidsColor[n];float4 a=solidsAttrs[n];float D=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],y,a,k);if(D<z)r=n;bool w=s(a.w);if(d==0.){float p=clamp((z-D)/(u*2.),0.,1.);M=lerp(M,v,p);if(!w)z=min(D,z);}else if(d>0.){float p=clamp(.5+.5*(D-z)/d,0.,1.);M=lerp(v,M,p);if(!w)z=c(D,z,d);}else{float p=clamp(.5+.5*(-D-z)/d,0.,1.);M=lerp(v,M,p);if(!w)z=f(D,z,d);if(p<.5)r=n;}}return z;}float3 r(int f){int i=(f&255)>>0,M=(f&65280)>>8,u=(f&16711680)>>16;return float3(i/255.,M/255.,u/255.);}bool t(int3 f){if(f.x<0)return true;if(f.x>255)return true;if(f.y<0)return true;if(f.y>255)return true;if(f.z<0)return true;if(f.z>255)return true;return false;}float d(int4 f){float s=0.;for(uint i=0;i<numSolids;++i)s+=abs(solidsBlend[i]);return s;}float3 d(int3 f,float i){float s=i*.5,z=chunkSize*.5;float3 c=float3(i*f.x-z,i*f.y-z,i*f.z-z)+s;return c;}void d(float3 f,float c,uint s,inout uint i,inout float r){uint e=numSolidsPerChunk[chunkId],n=s*maxSolidsPerVoxel,u=0;for(u=0;u<e;++u){uint t=solidsPerChunk[chunkId*maxSolids+u];float3 M=solidsScale[t],z=f;if(int(solidsAttrs[t].w)>>1&1)z.x=abs(z.x);float y=max(M.x,max(M.y,M.z))*1.732,d=length(solidsPos[t]-z)-y,m=(M.x+M.y+M.z)*.333333,g=m*2.;if(d<g){prefilteredSolidIds[n+i]=t;i+=1;r+=abs(solidsBlend[t])*m;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 u=d(i,s);int z=f(i.x,i.y,i.z,64);if(z==0)indirectDrawArgs[0]=0;uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float t=s*.25,y=t*.5,g=s*.5,S=chunkSize/256,n=chunkSize*.5;int e=z*maxSolidsPerVoxelMask;for(uint x=0;x<maxSolidsPerVoxelMask;++x)solidsFilter[e+x]=-1;float D=c(u+chunkCenter,s,M+s,r,z);for(uint m=0;m<8;++m){float3 k=u+t*cardinalCellOffset[m];for(uint p=0;p<8;++p){float3 v=k+y*cardinalCellOffset[p];int3 a=int3(round((v.x+n-y)/S),round((v.y+n-y)/S),round((v.z+n-y)/S));int w=f(a.x,a.y,a.z,256);gridData[w]=float3(0,0,0);if(abs(D)<s){int o=0;float3 l=float3(1.,1.,1.);float C=c(v+chunkCenter,y,o,l,r,z,w);if(abs(C)<g){int X=solidsClayObjectId[o]+1;gridData[w]=float3(C,f(l),X);}}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cacheDistField(int3 i:SV_DispatchThreadID){if(numSolidsPerChunk[chunkId]==0){return;}float s=chunkSize/64;float3 u=d(i,s);int z=f(i.x,i.y,i.z,64);uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float t=s*.25,y=t*.5,g=s*.5,S=chunkSize/256,n=chunkSize*.5;int e=z*maxSolidsPerVoxelMask;for(uint x=0;x<maxSolidsPerVoxelMask;++x)solidsFilter[e+x]=-1;float m=c(u+chunkCenter,s,M+s,r,z);fieldCache1[chunkId*fieldCacheSize1+z]=m;for(uint p=0;p<8;++p){float3 k=u+t*cardinalCellOffset[p];for(uint D=0;D<8;++D){float3 v=k+y*cardinalCellOffset[D];int3 a=int3(round((v.x+n-y)/S),round((v.y+n-y)/S),round((v.z+n-y)/S));int w=f(a.x,a.y,a.z,256);gridData[w]=float3(0,0,0);int o=0;float3 l=float3(1.,1.,1.);float C=c(v+chunkCenter,y,o,l,r,z,w);fieldCache2[chunkId*fieldCacheSize2+w]=c(l.x,l.y,l.z,clamp(C,-1.,1.));}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void clearCachedDistField(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 t=d(i,s);int n=f(i.x,i.y,i.z,64);float u=s*.25,z=u*.5,M=s*.5,r=chunkSize/256,g=chunkSize*.5;fieldCache1[chunkId*fieldCacheSize1+n]=1.;float m=c(1.,1.,1.,1.);for(uint x=0;x<8;++x){float3 k=t+u*cardinalCellOffset[x];for(uint e=0;e<8;++e){float3 v=k+z*cardinalCellOffset[e];int3 a=int3(round((v.x+g-z)/r),round((v.y+g-z)/r),round((v.z+g-z)/r));int y=f(a.x,a.y,a.z,256);fieldCache2[chunkId*fieldCacheSize2+y]=m;}}}float r(float f,float c){float s=c-f,i=.5;if(s!=0.)i=f/s;return i;}float2 i(float2 f){float2 s=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*s;return i;}float m(float2 f){int i=2048;float s=floor(f.x*(i-1)),M=floor(f.y*(i-1)),r=s*i+M;return r;}float g(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float s=m(f.xy);return s;}int d(uint f,uint r,uint s,uint i){int c=f<<24|r<<16|s<<8|i;return c;}float u(float3 f){float s=dot(round(f*255),float3(65536,256,1));return s;}groupshared int4 gs_pointCloudData[256];groupshared uint gs_numElements,gs_globalOffset;void d(int3 i,float s,int c){int n=f(i.x,i.y,i.z,256);float3 t=gridData[n];if(t.z==0.){return;}float e[8];int m=0;for(int z=0;z<8;++z){int3 M=i+localGridCellCoords[z];int x=f(M.x,M.y,M.z,256);float3 v=gridData[x];if(v.z==0.){return;}e[z]=v.x;if(v.x<=0.)m|=1<<z;}int M=cubeEdgeFlags[m];if(M==0){return;}float3 y=i;int x=m*16,a[3]={triangleConnectionTable[x+3],triangleConnectionTable[x+4],triangleConnectionTable[x+5]};float3 v=float3(0,0,0),S[3];int k;for(k=0;k<3;++k){int p=a[k];float D=e[edgeConnection[p].x],w=e[edgeConnection[p].y],o=r(D,w);float3 l=y+(vertexOffset[edgeConnection[p].x]-o*edgeDirection[p])*s;S[k]=l;v+=l;}float3 D=cross(S[2]-S[0],S[1]-S[0]);if(sqrt(dot(D,D))>0.){a[0]=triangleConnectionTable[x];a[1]=triangleConnectionTable[x+1];a[2]=triangleConnectionTable[x+2];for(k=0;k<3;++k){int p=a[k];float l=e[edgeConnection[p].x],w=e[edgeConnection[p].y],o=r(l,w);float3 C=y+(vertexOffset[edgeConnection[p].x]-o*edgeDirection[p])*s;S[k]=C;}D+=cross(S[2]-S[0],S[1]-S[0]);a[0]=triangleConnectionTable[x+6];a[1]=triangleConnectionTable[x+7];a[2]=triangleConnectionTable[x+8];for(k=0;k<3;++k){int p=a[k];float l=e[edgeConnection[p].x],w=e[edgeConnection[p].y],o=r(l,w);float3 C=y+(vertexOffset[edgeConnection[p].x]-o*edgeDirection[p])*s;S[k]=C;}D+=cross(S[2]-S[0],S[1]-S[0]);a[0]=triangleConnectionTable[x+9];a[1]=triangleConnectionTable[x+10];a[2]=triangleConnectionTable[x+11];for(k=0;k<3;++k){int p=a[k];float l=e[edgeConnection[p].x],w=e[edgeConnection[p].y],o=r(l,w);float3 C=y+(vertexOffset[edgeConnection[p].x]-o*edgeDirection[p])*s;S[k]=C;}D+=cross(S[2]-S[0],S[1]-S[0]);D=normalize(D);v/=3;float3 p=(v-y)/s;uint l=uint(u(p));float w=g(D);int o=t.y,C=t.z;if(C>255)C=255;int X=0;InterlockedAdd(gs_numElements,1,X);gs_pointCloudData[X]=int4(d(i.x,i.y,i.z,C),l,w,o);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 f:SV_DispatchThreadID,uint i:SV_GroupIndex){if(i==0)gs_numElements=0,gs_globalOffset=0;GroupMemoryBarrierWithGroupSync();float s=chunkSize/256;d(f,s,i);GroupMemoryBarrierWithGroupSync();if(i==0)InterlockedAdd(indirectDrawArgs[0],gs_numElements*3,gs_globalOffset),gs_globalOffset/=3;GroupMemoryBarrierWithGroupSync();if(i<gs_numElements)pointCloudData[gs_globalOffset+i]=gs_pointCloudData[i];}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){
#if DRAW_DEBUG
int s=f(i.x,i.y,i.z,256);if(gridData[s].z!=0.){int p=debugGridOutPoints.IncrementCounter();float z=chunkSize/256;debugGridOutPoints[p]=d(i,z)+chunkCenter;}
#endif
}float4 p(uint f){int i=(f&255)>>0,M=(f&65280)>>8,s=(f&16711680)>>16;return float4(i/255.,M/255.,s/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 u=d(i,s);int z=f(i.x,i.y,i.z,64);uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float t=s*.25,y=t*.5,w=s*.5,S=chunkSize/256,n=chunkSize*.5;int x=z*maxSolidsPerVoxelMask;for(uint p=0;p<maxSolidsPerVoxelMask;++p)solidsFilter[x+p]=-1;float k=c(u+chunkCenter,s,M+s,r,z);for(uint e=0;e<8;++e){float3 m=u+t*cardinalCellOffset[e];for(uint g=0;g<8;++g){float3 v=m+y*cardinalCellOffset[g];int3 a=int3(round((v.x+n-y)/S),round((v.y+n-y)/S),round((v.z+n-y)/S));int D=f(a.x,a.y,a.z,256);gridData[D]=float3(0,0,0);int l=0;float3 C=float3(1.,1.,1.);float o=c(v+chunkCenter,y,l,C,r,z,D);int X=solidsClayObjectId[l]+1;gridData[D]=float3(o,f(C),X);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){float s=chunkSize/256;int n=f(i.x,i.y,i.z,256);float3 c=gridData[n];if(c.z==0.){return;}float t[8];int e=0,M=0;for(int x=0;x<8;++x){int3 u=i+localGridCellCoords[x];if(u.x<0||u.y<0||u.z<0||u.x>255||u.y>255||u.z>255){return;}int k=f(u.x,u.y,u.z,256);float3 v=gridData[k];t[x]=v.x;if(v.z==0.){continue;}if(v.x<0.)e|=1<<x;}int u=cubeEdgeFlags[e];if(u<0){return;}float3 m=d(i,s),a[12];for(int z=0;z<12;++z){if((u&1<<z)!=0){float v=t[edgeConnection[z].x],w=t[edgeConnection[z].y],y=r(v,w);a[z]=m+(vertexOffset[edgeConnection[z].x]-y*edgeDirection[z])*s;}}int k=e*16;for(int S=0;S<5;++S){int y=3*S;if(triangleConnectionTable[k+y]>=0){uint g=meshOutIndices.IncrementCounter();for(int D=0;D<3;++D){int w=triangleConnectionTable[k+y+D],l=g*3+D,v=c.y;meshOutPoints[l]=a[w]+chunkCenter;meshOutColors[l]=p(v);meshOutIndices[g][2-D]=l+outMeshIndexOffset;}}}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int s=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float i=chunkSize/256.f,M=chunkSize-i,u=chunkSize*.5;float3 c=float3(-(chunkSize*numChunksX*.5)+u+M*f.x,-(chunkSize*numChunksY*.5)+u+M*f.y,-(chunkSize*numChunksZ*.5)+u+M*f.z);float z=chunkSize*1.732*.5;int x=s*3,r=0;if(!alwaysProcessAllChunks)r=updateChunks[s]-1;int t=0;for(uint p=0;p<numSolids;++p){float3 v=solidsScale[p];float k=max(v.x,max(v.y,v.z))*1.732;float3 y=c;if(checkMirrorX(solidsAttrs[p].w))y.x=abs(y.x);float D=length(solidsPos[p]-y)-k;if(D<z){solidsPerChunk[s*maxSolids+t]=p;t+=1;if(alwaysProcessAllChunks==0){if(r<=0){for(uint n=0;n<numSolidsUpdated;++n){uint m=solidsUpdated[n];if(m==p){r=1;break;}}}}}}numSolidsPerChunk[s]=t;if(alwaysProcessAllChunks==0){uint m=0,e=0;if(r>-1)m=64/MAXTHREADS,e=256/MAXTHREADS;updateChunks[s]=r;indirectChunkArgs1[x]=m;indirectChunkArgs1[x+1]=m;indirectChunkArgs1[x+2]=m;indirectChunkArgs2[x]=e;indirectChunkArgs2[x+1]=e;indirectChunkArgs2[x+2]=e;}}